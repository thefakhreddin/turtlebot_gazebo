// Generated by gencpp from file nuturtlebot/WheelCommands.msg
// DO NOT EDIT!


#ifndef NUTURTLEBOT_MESSAGE_WHEELCOMMANDS_H
#define NUTURTLEBOT_MESSAGE_WHEELCOMMANDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nuturtlebot
{
template <class ContainerAllocator>
struct WheelCommands_
{
  typedef WheelCommands_<ContainerAllocator> Type;

  WheelCommands_()
    : left_velocity(0)
    , right_velocity(0)  {
    }
  WheelCommands_(const ContainerAllocator& _alloc)
    : left_velocity(0)
    , right_velocity(0)  {
  (void)_alloc;
    }



   typedef int32_t _left_velocity_type;
  _left_velocity_type left_velocity;

   typedef int32_t _right_velocity_type;
  _right_velocity_type right_velocity;





  typedef boost::shared_ptr< ::nuturtlebot::WheelCommands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nuturtlebot::WheelCommands_<ContainerAllocator> const> ConstPtr;

}; // struct WheelCommands_

typedef ::nuturtlebot::WheelCommands_<std::allocator<void> > WheelCommands;

typedef boost::shared_ptr< ::nuturtlebot::WheelCommands > WheelCommandsPtr;
typedef boost::shared_ptr< ::nuturtlebot::WheelCommands const> WheelCommandsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nuturtlebot::WheelCommands_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nuturtlebot::WheelCommands_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nuturtlebot::WheelCommands_<ContainerAllocator1> & lhs, const ::nuturtlebot::WheelCommands_<ContainerAllocator2> & rhs)
{
  return lhs.left_velocity == rhs.left_velocity &&
    lhs.right_velocity == rhs.right_velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nuturtlebot::WheelCommands_<ContainerAllocator1> & lhs, const ::nuturtlebot::WheelCommands_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nuturtlebot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::nuturtlebot::WheelCommands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nuturtlebot::WheelCommands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nuturtlebot::WheelCommands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nuturtlebot::WheelCommands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nuturtlebot::WheelCommands_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nuturtlebot::WheelCommands_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nuturtlebot::WheelCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "55f26e03298a44797b568254274af487";
  }

  static const char* value(const ::nuturtlebot::WheelCommands_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x55f26e03298a4479ULL;
  static const uint64_t static_value2 = 0x7b568254274af487ULL;
};

template<class ContainerAllocator>
struct DataType< ::nuturtlebot::WheelCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nuturtlebot/WheelCommands";
  }

  static const char* value(const ::nuturtlebot::WheelCommands_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nuturtlebot::WheelCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Left and right wheel velocity, in raw dynamixel ticks\n"
"# See the turtlebot3 burger manual to find the\n"
"# Information on the dynamixel actuator used in the turtlebot3_burger.\n"
"# This documentation explains the relationship between the units\n"
"# used here and radians/sec\n"
"int32 left_velocity\n"
"int32 right_velocity\n"
;
  }

  static const char* value(const ::nuturtlebot::WheelCommands_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nuturtlebot::WheelCommands_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_velocity);
      stream.next(m.right_velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WheelCommands_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nuturtlebot::WheelCommands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nuturtlebot::WheelCommands_<ContainerAllocator>& v)
  {
    s << indent << "left_velocity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.left_velocity);
    s << indent << "right_velocity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.right_velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NUTURTLEBOT_MESSAGE_WHEELCOMMANDS_H
