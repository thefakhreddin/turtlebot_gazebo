// Generated by gencpp from file nuturtlebot/SensorData.msg
// DO NOT EDIT!


#ifndef NUTURTLEBOT_MESSAGE_SENSORDATA_H
#define NUTURTLEBOT_MESSAGE_SENSORDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nuturtlebot
{
template <class ContainerAllocator>
struct SensorData_
{
  typedef SensorData_<ContainerAllocator> Type;

  SensorData_()
    : stamp()
    , left_encoder(0)
    , right_encoder(0)
    , accelX(0)
    , accelY(0)
    , accelZ(0)
    , gyroX(0)
    , gyroY(0)
    , gyroZ(0)
    , magX(0)
    , magY(0)
    , magZ(0)
    , battery_voltage(0.0)  {
    }
  SensorData_(const ContainerAllocator& _alloc)
    : stamp()
    , left_encoder(0)
    , right_encoder(0)
    , accelX(0)
    , accelY(0)
    , accelZ(0)
    , gyroX(0)
    , gyroY(0)
    , gyroZ(0)
    , magX(0)
    , magY(0)
    , magZ(0)
    , battery_voltage(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef int32_t _left_encoder_type;
  _left_encoder_type left_encoder;

   typedef int32_t _right_encoder_type;
  _right_encoder_type right_encoder;

   typedef int16_t _accelX_type;
  _accelX_type accelX;

   typedef int16_t _accelY_type;
  _accelY_type accelY;

   typedef int16_t _accelZ_type;
  _accelZ_type accelZ;

   typedef int16_t _gyroX_type;
  _gyroX_type gyroX;

   typedef int16_t _gyroY_type;
  _gyroY_type gyroY;

   typedef int16_t _gyroZ_type;
  _gyroZ_type gyroZ;

   typedef int16_t _magX_type;
  _magX_type magX;

   typedef int16_t _magY_type;
  _magY_type magY;

   typedef int16_t _magZ_type;
  _magZ_type magZ;

   typedef float _battery_voltage_type;
  _battery_voltage_type battery_voltage;





  typedef boost::shared_ptr< ::nuturtlebot::SensorData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nuturtlebot::SensorData_<ContainerAllocator> const> ConstPtr;

}; // struct SensorData_

typedef ::nuturtlebot::SensorData_<std::allocator<void> > SensorData;

typedef boost::shared_ptr< ::nuturtlebot::SensorData > SensorDataPtr;
typedef boost::shared_ptr< ::nuturtlebot::SensorData const> SensorDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nuturtlebot::SensorData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nuturtlebot::SensorData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nuturtlebot::SensorData_<ContainerAllocator1> & lhs, const ::nuturtlebot::SensorData_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.left_encoder == rhs.left_encoder &&
    lhs.right_encoder == rhs.right_encoder &&
    lhs.accelX == rhs.accelX &&
    lhs.accelY == rhs.accelY &&
    lhs.accelZ == rhs.accelZ &&
    lhs.gyroX == rhs.gyroX &&
    lhs.gyroY == rhs.gyroY &&
    lhs.gyroZ == rhs.gyroZ &&
    lhs.magX == rhs.magX &&
    lhs.magY == rhs.magY &&
    lhs.magZ == rhs.magZ &&
    lhs.battery_voltage == rhs.battery_voltage;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nuturtlebot::SensorData_<ContainerAllocator1> & lhs, const ::nuturtlebot::SensorData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nuturtlebot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::nuturtlebot::SensorData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nuturtlebot::SensorData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nuturtlebot::SensorData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nuturtlebot::SensorData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nuturtlebot::SensorData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nuturtlebot::SensorData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nuturtlebot::SensorData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e5bb303db7aaeaf900294f1b85ecc818";
  }

  static const char* value(const ::nuturtlebot::SensorData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe5bb303db7aaeaf9ULL;
  static const uint64_t static_value2 = 0x00294f1b85ecc818ULL;
};

template<class ContainerAllocator>
struct DataType< ::nuturtlebot::SensorData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nuturtlebot/SensorData";
  }

  static const char* value(const ::nuturtlebot::SensorData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nuturtlebot::SensorData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Time the data was recorded\n"
"time stamp         \n"
"# Left encoder data, in ticks\n"
"int32 left_encoder \n"
"# Left encoder data, in ticks\n"
"int32 right_encoder\n"
"# Raw acceleromter x, y, and z data\n"
"int16 accelX\n"
"int16 accelY\n"
"int16 accelZ\n"
"# Raw gyroscope x, y, and z data\n"
"int16 gyroX\n"
"int16 gyroY\n"
"int16 gyroZ\n"
"# raw magnetometer x, y, and z components\n"
"int16 magX\n"
"int16 magY\n"
"int16 magZ\n"
"#battery voltage\n"
"float32 battery_voltage\n"
;
  }

  static const char* value(const ::nuturtlebot::SensorData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nuturtlebot::SensorData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.left_encoder);
      stream.next(m.right_encoder);
      stream.next(m.accelX);
      stream.next(m.accelY);
      stream.next(m.accelZ);
      stream.next(m.gyroX);
      stream.next(m.gyroY);
      stream.next(m.gyroZ);
      stream.next(m.magX);
      stream.next(m.magY);
      stream.next(m.magZ);
      stream.next(m.battery_voltage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nuturtlebot::SensorData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nuturtlebot::SensorData_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "left_encoder: ";
    Printer<int32_t>::stream(s, indent + "  ", v.left_encoder);
    s << indent << "right_encoder: ";
    Printer<int32_t>::stream(s, indent + "  ", v.right_encoder);
    s << indent << "accelX: ";
    Printer<int16_t>::stream(s, indent + "  ", v.accelX);
    s << indent << "accelY: ";
    Printer<int16_t>::stream(s, indent + "  ", v.accelY);
    s << indent << "accelZ: ";
    Printer<int16_t>::stream(s, indent + "  ", v.accelZ);
    s << indent << "gyroX: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gyroX);
    s << indent << "gyroY: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gyroY);
    s << indent << "gyroZ: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gyroZ);
    s << indent << "magX: ";
    Printer<int16_t>::stream(s, indent + "  ", v.magX);
    s << indent << "magY: ";
    Printer<int16_t>::stream(s, indent + "  ", v.magY);
    s << indent << "magZ: ";
    Printer<int16_t>::stream(s, indent + "  ", v.magZ);
    s << indent << "battery_voltage: ";
    Printer<float>::stream(s, indent + "  ", v.battery_voltage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NUTURTLEBOT_MESSAGE_SENSORDATA_H
