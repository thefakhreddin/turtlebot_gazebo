// Generated by gencpp from file rigid2d/set_poseResponse.msg
// DO NOT EDIT!


#ifndef RIGID2D_MESSAGE_SET_POSERESPONSE_H
#define RIGID2D_MESSAGE_SET_POSERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rigid2d
{
template <class ContainerAllocator>
struct set_poseResponse_
{
  typedef set_poseResponse_<ContainerAllocator> Type;

  set_poseResponse_()
    : set_pose_state(false)  {
    }
  set_poseResponse_(const ContainerAllocator& _alloc)
    : set_pose_state(false)  {
  (void)_alloc;
    }



   typedef uint8_t _set_pose_state_type;
  _set_pose_state_type set_pose_state;





  typedef boost::shared_ptr< ::rigid2d::set_poseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rigid2d::set_poseResponse_<ContainerAllocator> const> ConstPtr;

}; // struct set_poseResponse_

typedef ::rigid2d::set_poseResponse_<std::allocator<void> > set_poseResponse;

typedef boost::shared_ptr< ::rigid2d::set_poseResponse > set_poseResponsePtr;
typedef boost::shared_ptr< ::rigid2d::set_poseResponse const> set_poseResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rigid2d::set_poseResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rigid2d::set_poseResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rigid2d::set_poseResponse_<ContainerAllocator1> & lhs, const ::rigid2d::set_poseResponse_<ContainerAllocator2> & rhs)
{
  return lhs.set_pose_state == rhs.set_pose_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rigid2d::set_poseResponse_<ContainerAllocator1> & lhs, const ::rigid2d::set_poseResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rigid2d

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rigid2d::set_poseResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rigid2d::set_poseResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rigid2d::set_poseResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rigid2d::set_poseResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rigid2d::set_poseResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rigid2d::set_poseResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rigid2d::set_poseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c20de4c0bd76233cf2af89791f066dc5";
  }

  static const char* value(const ::rigid2d::set_poseResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc20de4c0bd76233cULL;
  static const uint64_t static_value2 = 0xf2af89791f066dc5ULL;
};

template<class ContainerAllocator>
struct DataType< ::rigid2d::set_poseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rigid2d/set_poseResponse";
  }

  static const char* value(const ::rigid2d::set_poseResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rigid2d::set_poseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool set_pose_state\n"
"\n"
;
  }

  static const char* value(const ::rigid2d::set_poseResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rigid2d::set_poseResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.set_pose_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct set_poseResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rigid2d::set_poseResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rigid2d::set_poseResponse_<ContainerAllocator>& v)
  {
    s << indent << "set_pose_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_pose_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RIGID2D_MESSAGE_SET_POSERESPONSE_H
