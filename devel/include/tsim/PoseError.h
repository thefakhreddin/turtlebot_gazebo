// Generated by gencpp from file tsim/PoseError.msg
// DO NOT EDIT!


#ifndef TSIM_MESSAGE_POSEERROR_H
#define TSIM_MESSAGE_POSEERROR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tsim
{
template <class ContainerAllocator>
struct PoseError_
{
  typedef PoseError_<ContainerAllocator> Type;

  PoseError_()
    : x_error(0.0)
    , y_error(0.0)
    , theta_error(0.0)  {
    }
  PoseError_(const ContainerAllocator& _alloc)
    : x_error(0.0)
    , y_error(0.0)
    , theta_error(0.0)  {
  (void)_alloc;
    }



   typedef float _x_error_type;
  _x_error_type x_error;

   typedef float _y_error_type;
  _y_error_type y_error;

   typedef float _theta_error_type;
  _theta_error_type theta_error;





  typedef boost::shared_ptr< ::tsim::PoseError_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tsim::PoseError_<ContainerAllocator> const> ConstPtr;

}; // struct PoseError_

typedef ::tsim::PoseError_<std::allocator<void> > PoseError;

typedef boost::shared_ptr< ::tsim::PoseError > PoseErrorPtr;
typedef boost::shared_ptr< ::tsim::PoseError const> PoseErrorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tsim::PoseError_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tsim::PoseError_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tsim::PoseError_<ContainerAllocator1> & lhs, const ::tsim::PoseError_<ContainerAllocator2> & rhs)
{
  return lhs.x_error == rhs.x_error &&
    lhs.y_error == rhs.y_error &&
    lhs.theta_error == rhs.theta_error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tsim::PoseError_<ContainerAllocator1> & lhs, const ::tsim::PoseError_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tsim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tsim::PoseError_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tsim::PoseError_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tsim::PoseError_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tsim::PoseError_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tsim::PoseError_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tsim::PoseError_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tsim::PoseError_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d2b1656b3ae7e47d072bbd7d5734d5a4";
  }

  static const char* value(const ::tsim::PoseError_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd2b1656b3ae7e47dULL;
  static const uint64_t static_value2 = 0x072bbd7d5734d5a4ULL;
};

template<class ContainerAllocator>
struct DataType< ::tsim::PoseError_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tsim/PoseError";
  }

  static const char* value(const ::tsim::PoseError_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tsim::PoseError_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# absolute value of the x error\n"
"float32 x_error\n"
"\n"
"# absolute value of the x error\n"
"float32 y_error\n"
"\n"
"# absolute value of the angular error\n"
"float32 theta_error\n"
;
  }

  static const char* value(const ::tsim::PoseError_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tsim::PoseError_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_error);
      stream.next(m.y_error);
      stream.next(m.theta_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PoseError_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tsim::PoseError_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tsim::PoseError_<ContainerAllocator>& v)
  {
    s << indent << "x_error: ";
    Printer<float>::stream(s, indent + "  ", v.x_error);
    s << indent << "y_error: ";
    Printer<float>::stream(s, indent + "  ", v.y_error);
    s << indent << "theta_error: ";
    Printer<float>::stream(s, indent + "  ", v.theta_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TSIM_MESSAGE_POSEERROR_H
