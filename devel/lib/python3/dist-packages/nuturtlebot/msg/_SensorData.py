# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from nuturtlebot/SensorData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class SensorData(genpy.Message):
  _md5sum = "e5bb303db7aaeaf900294f1b85ecc818"
  _type = "nuturtlebot/SensorData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Time the data was recorded
time stamp         
# Left encoder data, in ticks
int32 left_encoder 
# Left encoder data, in ticks
int32 right_encoder
# Raw acceleromter x, y, and z data
int16 accelX
int16 accelY
int16 accelZ
# Raw gyroscope x, y, and z data
int16 gyroX
int16 gyroY
int16 gyroZ
# raw magnetometer x, y, and z components
int16 magX
int16 magY
int16 magZ
#battery voltage
float32 battery_voltage
"""
  __slots__ = ['stamp','left_encoder','right_encoder','accelX','accelY','accelZ','gyroX','gyroY','gyroZ','magX','magY','magZ','battery_voltage']
  _slot_types = ['time','int32','int32','int16','int16','int16','int16','int16','int16','int16','int16','int16','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,left_encoder,right_encoder,accelX,accelY,accelZ,gyroX,gyroY,gyroZ,magX,magY,magZ,battery_voltage

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SensorData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.left_encoder is None:
        self.left_encoder = 0
      if self.right_encoder is None:
        self.right_encoder = 0
      if self.accelX is None:
        self.accelX = 0
      if self.accelY is None:
        self.accelY = 0
      if self.accelZ is None:
        self.accelZ = 0
      if self.gyroX is None:
        self.gyroX = 0
      if self.gyroY is None:
        self.gyroY = 0
      if self.gyroZ is None:
        self.gyroZ = 0
      if self.magX is None:
        self.magX = 0
      if self.magY is None:
        self.magY = 0
      if self.magZ is None:
        self.magZ = 0
      if self.battery_voltage is None:
        self.battery_voltage = 0.
    else:
      self.stamp = genpy.Time()
      self.left_encoder = 0
      self.right_encoder = 0
      self.accelX = 0
      self.accelY = 0
      self.accelZ = 0
      self.gyroX = 0
      self.gyroY = 0
      self.gyroZ = 0
      self.magX = 0
      self.magY = 0
      self.magZ = 0
      self.battery_voltage = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I2i9hf().pack(_x.stamp.secs, _x.stamp.nsecs, _x.left_encoder, _x.right_encoder, _x.accelX, _x.accelY, _x.accelZ, _x.gyroX, _x.gyroY, _x.gyroZ, _x.magX, _x.magY, _x.magZ, _x.battery_voltage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 38
      (_x.stamp.secs, _x.stamp.nsecs, _x.left_encoder, _x.right_encoder, _x.accelX, _x.accelY, _x.accelZ, _x.gyroX, _x.gyroY, _x.gyroZ, _x.magX, _x.magY, _x.magZ, _x.battery_voltage,) = _get_struct_2I2i9hf().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I2i9hf().pack(_x.stamp.secs, _x.stamp.nsecs, _x.left_encoder, _x.right_encoder, _x.accelX, _x.accelY, _x.accelZ, _x.gyroX, _x.gyroY, _x.gyroZ, _x.magX, _x.magY, _x.magZ, _x.battery_voltage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 38
      (_x.stamp.secs, _x.stamp.nsecs, _x.left_encoder, _x.right_encoder, _x.accelX, _x.accelY, _x.accelZ, _x.gyroX, _x.gyroY, _x.gyroZ, _x.magX, _x.magY, _x.magZ, _x.battery_voltage,) = _get_struct_2I2i9hf().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I2i9hf = None
def _get_struct_2I2i9hf():
    global _struct_2I2i9hf
    if _struct_2I2i9hf is None:
        _struct_2I2i9hf = struct.Struct("<2I2i9hf")
    return _struct_2I2i9hf
